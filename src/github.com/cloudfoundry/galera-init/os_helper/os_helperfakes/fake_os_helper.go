// Code generated by counterfeiter. DO NOT EDIT.
package os_helperfakes

import (
	"os"
	"os/exec"
	"sync"
	"time"

	"github.com/cloudfoundry/galera-init/os_helper"
)

type FakeOsHelper struct {
	FileExistsStub        func(string) bool
	fileExistsMutex       sync.RWMutex
	fileExistsArgsForCall []struct {
		arg1 string
	}
	fileExistsReturns struct {
		result1 bool
	}
	fileExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	KillCommandStub        func(*exec.Cmd, os.Signal) error
	killCommandMutex       sync.RWMutex
	killCommandArgsForCall []struct {
		arg1 *exec.Cmd
		arg2 os.Signal
	}
	killCommandReturns struct {
		result1 error
	}
	killCommandReturnsOnCall map[int]struct {
		result1 error
	}
	ReadFileStub        func(string) (string, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 string
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RunCommandStub        func(string, ...string) (string, error)
	runCommandMutex       sync.RWMutex
	runCommandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	runCommandReturns struct {
		result1 string
		result2 error
	}
	runCommandReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SleepStub        func(time.Duration)
	sleepMutex       sync.RWMutex
	sleepArgsForCall []struct {
		arg1 time.Duration
	}
	StartCommandStub        func(string, string, ...string) (*exec.Cmd, error)
	startCommandMutex       sync.RWMutex
	startCommandArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	startCommandReturns struct {
		result1 *exec.Cmd
		result2 error
	}
	startCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
		result2 error
	}
	WaitForCommandStub        func(*exec.Cmd) chan error
	waitForCommandMutex       sync.RWMutex
	waitForCommandArgsForCall []struct {
		arg1 *exec.Cmd
	}
	waitForCommandReturns struct {
		result1 chan error
	}
	waitForCommandReturnsOnCall map[int]struct {
		result1 chan error
	}
	WriteStringToFileStub        func(string, string) error
	writeStringToFileMutex       sync.RWMutex
	writeStringToFileArgsForCall []struct {
		arg1 string
		arg2 string
	}
	writeStringToFileReturns struct {
		result1 error
	}
	writeStringToFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOsHelper) FileExists(arg1 string) bool {
	fake.fileExistsMutex.Lock()
	ret, specificReturn := fake.fileExistsReturnsOnCall[len(fake.fileExistsArgsForCall)]
	fake.fileExistsArgsForCall = append(fake.fileExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FileExistsStub
	fakeReturns := fake.fileExistsReturns
	fake.recordInvocation("FileExists", []interface{}{arg1})
	fake.fileExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOsHelper) FileExistsCallCount() int {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	return len(fake.fileExistsArgsForCall)
}

func (fake *FakeOsHelper) FileExistsCalls(stub func(string) bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = stub
}

func (fake *FakeOsHelper) FileExistsArgsForCall(i int) string {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	argsForCall := fake.fileExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOsHelper) FileExistsReturns(result1 bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = nil
	fake.fileExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeOsHelper) FileExistsReturnsOnCall(i int, result1 bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = nil
	if fake.fileExistsReturnsOnCall == nil {
		fake.fileExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.fileExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeOsHelper) KillCommand(arg1 *exec.Cmd, arg2 os.Signal) error {
	fake.killCommandMutex.Lock()
	ret, specificReturn := fake.killCommandReturnsOnCall[len(fake.killCommandArgsForCall)]
	fake.killCommandArgsForCall = append(fake.killCommandArgsForCall, struct {
		arg1 *exec.Cmd
		arg2 os.Signal
	}{arg1, arg2})
	stub := fake.KillCommandStub
	fakeReturns := fake.killCommandReturns
	fake.recordInvocation("KillCommand", []interface{}{arg1, arg2})
	fake.killCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOsHelper) KillCommandCallCount() int {
	fake.killCommandMutex.RLock()
	defer fake.killCommandMutex.RUnlock()
	return len(fake.killCommandArgsForCall)
}

func (fake *FakeOsHelper) KillCommandCalls(stub func(*exec.Cmd, os.Signal) error) {
	fake.killCommandMutex.Lock()
	defer fake.killCommandMutex.Unlock()
	fake.KillCommandStub = stub
}

func (fake *FakeOsHelper) KillCommandArgsForCall(i int) (*exec.Cmd, os.Signal) {
	fake.killCommandMutex.RLock()
	defer fake.killCommandMutex.RUnlock()
	argsForCall := fake.killCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOsHelper) KillCommandReturns(result1 error) {
	fake.killCommandMutex.Lock()
	defer fake.killCommandMutex.Unlock()
	fake.KillCommandStub = nil
	fake.killCommandReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) KillCommandReturnsOnCall(i int, result1 error) {
	fake.killCommandMutex.Lock()
	defer fake.killCommandMutex.Unlock()
	fake.KillCommandStub = nil
	if fake.killCommandReturnsOnCall == nil {
		fake.killCommandReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.killCommandReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) ReadFile(arg1 string) (string, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOsHelper) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeOsHelper) ReadFileCalls(stub func(string) (string, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeOsHelper) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOsHelper) ReadFileReturns(result1 string, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) ReadFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) RunCommand(arg1 string, arg2 ...string) (string, error) {
	fake.runCommandMutex.Lock()
	ret, specificReturn := fake.runCommandReturnsOnCall[len(fake.runCommandArgsForCall)]
	fake.runCommandArgsForCall = append(fake.runCommandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.RunCommandStub
	fakeReturns := fake.runCommandReturns
	fake.recordInvocation("RunCommand", []interface{}{arg1, arg2})
	fake.runCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOsHelper) RunCommandCallCount() int {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return len(fake.runCommandArgsForCall)
}

func (fake *FakeOsHelper) RunCommandCalls(stub func(string, ...string) (string, error)) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = stub
}

func (fake *FakeOsHelper) RunCommandArgsForCall(i int) (string, []string) {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	argsForCall := fake.runCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOsHelper) RunCommandReturns(result1 string, result2 error) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	fake.runCommandReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) RunCommandReturnsOnCall(i int, result1 string, result2 error) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	if fake.runCommandReturnsOnCall == nil {
		fake.runCommandReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.runCommandReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) Sleep(arg1 time.Duration) {
	fake.sleepMutex.Lock()
	fake.sleepArgsForCall = append(fake.sleepArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.SleepStub
	fake.recordInvocation("Sleep", []interface{}{arg1})
	fake.sleepMutex.Unlock()
	if stub != nil {
		fake.SleepStub(arg1)
	}
}

func (fake *FakeOsHelper) SleepCallCount() int {
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	return len(fake.sleepArgsForCall)
}

func (fake *FakeOsHelper) SleepCalls(stub func(time.Duration)) {
	fake.sleepMutex.Lock()
	defer fake.sleepMutex.Unlock()
	fake.SleepStub = stub
}

func (fake *FakeOsHelper) SleepArgsForCall(i int) time.Duration {
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	argsForCall := fake.sleepArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOsHelper) StartCommand(arg1 string, arg2 string, arg3 ...string) (*exec.Cmd, error) {
	fake.startCommandMutex.Lock()
	ret, specificReturn := fake.startCommandReturnsOnCall[len(fake.startCommandArgsForCall)]
	fake.startCommandArgsForCall = append(fake.startCommandArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.StartCommandStub
	fakeReturns := fake.startCommandReturns
	fake.recordInvocation("StartCommand", []interface{}{arg1, arg2, arg3})
	fake.startCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOsHelper) StartCommandCallCount() int {
	fake.startCommandMutex.RLock()
	defer fake.startCommandMutex.RUnlock()
	return len(fake.startCommandArgsForCall)
}

func (fake *FakeOsHelper) StartCommandCalls(stub func(string, string, ...string) (*exec.Cmd, error)) {
	fake.startCommandMutex.Lock()
	defer fake.startCommandMutex.Unlock()
	fake.StartCommandStub = stub
}

func (fake *FakeOsHelper) StartCommandArgsForCall(i int) (string, string, []string) {
	fake.startCommandMutex.RLock()
	defer fake.startCommandMutex.RUnlock()
	argsForCall := fake.startCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOsHelper) StartCommandReturns(result1 *exec.Cmd, result2 error) {
	fake.startCommandMutex.Lock()
	defer fake.startCommandMutex.Unlock()
	fake.StartCommandStub = nil
	fake.startCommandReturns = struct {
		result1 *exec.Cmd
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) StartCommandReturnsOnCall(i int, result1 *exec.Cmd, result2 error) {
	fake.startCommandMutex.Lock()
	defer fake.startCommandMutex.Unlock()
	fake.StartCommandStub = nil
	if fake.startCommandReturnsOnCall == nil {
		fake.startCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
			result2 error
		})
	}
	fake.startCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) WaitForCommand(arg1 *exec.Cmd) chan error {
	fake.waitForCommandMutex.Lock()
	ret, specificReturn := fake.waitForCommandReturnsOnCall[len(fake.waitForCommandArgsForCall)]
	fake.waitForCommandArgsForCall = append(fake.waitForCommandArgsForCall, struct {
		arg1 *exec.Cmd
	}{arg1})
	stub := fake.WaitForCommandStub
	fakeReturns := fake.waitForCommandReturns
	fake.recordInvocation("WaitForCommand", []interface{}{arg1})
	fake.waitForCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOsHelper) WaitForCommandCallCount() int {
	fake.waitForCommandMutex.RLock()
	defer fake.waitForCommandMutex.RUnlock()
	return len(fake.waitForCommandArgsForCall)
}

func (fake *FakeOsHelper) WaitForCommandCalls(stub func(*exec.Cmd) chan error) {
	fake.waitForCommandMutex.Lock()
	defer fake.waitForCommandMutex.Unlock()
	fake.WaitForCommandStub = stub
}

func (fake *FakeOsHelper) WaitForCommandArgsForCall(i int) *exec.Cmd {
	fake.waitForCommandMutex.RLock()
	defer fake.waitForCommandMutex.RUnlock()
	argsForCall := fake.waitForCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOsHelper) WaitForCommandReturns(result1 chan error) {
	fake.waitForCommandMutex.Lock()
	defer fake.waitForCommandMutex.Unlock()
	fake.WaitForCommandStub = nil
	fake.waitForCommandReturns = struct {
		result1 chan error
	}{result1}
}

func (fake *FakeOsHelper) WaitForCommandReturnsOnCall(i int, result1 chan error) {
	fake.waitForCommandMutex.Lock()
	defer fake.waitForCommandMutex.Unlock()
	fake.WaitForCommandStub = nil
	if fake.waitForCommandReturnsOnCall == nil {
		fake.waitForCommandReturnsOnCall = make(map[int]struct {
			result1 chan error
		})
	}
	fake.waitForCommandReturnsOnCall[i] = struct {
		result1 chan error
	}{result1}
}

func (fake *FakeOsHelper) WriteStringToFile(arg1 string, arg2 string) error {
	fake.writeStringToFileMutex.Lock()
	ret, specificReturn := fake.writeStringToFileReturnsOnCall[len(fake.writeStringToFileArgsForCall)]
	fake.writeStringToFileArgsForCall = append(fake.writeStringToFileArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WriteStringToFileStub
	fakeReturns := fake.writeStringToFileReturns
	fake.recordInvocation("WriteStringToFile", []interface{}{arg1, arg2})
	fake.writeStringToFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOsHelper) WriteStringToFileCallCount() int {
	fake.writeStringToFileMutex.RLock()
	defer fake.writeStringToFileMutex.RUnlock()
	return len(fake.writeStringToFileArgsForCall)
}

func (fake *FakeOsHelper) WriteStringToFileCalls(stub func(string, string) error) {
	fake.writeStringToFileMutex.Lock()
	defer fake.writeStringToFileMutex.Unlock()
	fake.WriteStringToFileStub = stub
}

func (fake *FakeOsHelper) WriteStringToFileArgsForCall(i int) (string, string) {
	fake.writeStringToFileMutex.RLock()
	defer fake.writeStringToFileMutex.RUnlock()
	argsForCall := fake.writeStringToFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOsHelper) WriteStringToFileReturns(result1 error) {
	fake.writeStringToFileMutex.Lock()
	defer fake.writeStringToFileMutex.Unlock()
	fake.WriteStringToFileStub = nil
	fake.writeStringToFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) WriteStringToFileReturnsOnCall(i int, result1 error) {
	fake.writeStringToFileMutex.Lock()
	defer fake.writeStringToFileMutex.Unlock()
	fake.WriteStringToFileStub = nil
	if fake.writeStringToFileReturnsOnCall == nil {
		fake.writeStringToFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeStringToFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	fake.killCommandMutex.RLock()
	defer fake.killCommandMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	fake.startCommandMutex.RLock()
	defer fake.startCommandMutex.RUnlock()
	fake.waitForCommandMutex.RLock()
	defer fake.waitForCommandMutex.RUnlock()
	fake.writeStringToFileMutex.RLock()
	defer fake.writeStringToFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOsHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ os_helper.OsHelper = new(FakeOsHelper)
