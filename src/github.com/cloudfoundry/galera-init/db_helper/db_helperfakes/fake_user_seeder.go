// Code generated by counterfeiter. DO NOT EDIT.
package db_helperfakes

import (
	"sync"

	"github.com/cloudfoundry/galera-init/db_helper"
)

type FakeUserSeeder struct {
	SeedUserStub        func(string, string, string, string) error
	seedUserMutex       sync.RWMutex
	seedUserArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	seedUserReturns struct {
		result1 error
	}
	seedUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserSeeder) SeedUser(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.seedUserMutex.Lock()
	ret, specificReturn := fake.seedUserReturnsOnCall[len(fake.seedUserArgsForCall)]
	fake.seedUserArgsForCall = append(fake.seedUserArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SeedUserStub
	fakeReturns := fake.seedUserReturns
	fake.recordInvocation("SeedUser", []interface{}{arg1, arg2, arg3, arg4})
	fake.seedUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserSeeder) SeedUserCallCount() int {
	fake.seedUserMutex.RLock()
	defer fake.seedUserMutex.RUnlock()
	return len(fake.seedUserArgsForCall)
}

func (fake *FakeUserSeeder) SeedUserCalls(stub func(string, string, string, string) error) {
	fake.seedUserMutex.Lock()
	defer fake.seedUserMutex.Unlock()
	fake.SeedUserStub = stub
}

func (fake *FakeUserSeeder) SeedUserArgsForCall(i int) (string, string, string, string) {
	fake.seedUserMutex.RLock()
	defer fake.seedUserMutex.RUnlock()
	argsForCall := fake.seedUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUserSeeder) SeedUserReturns(result1 error) {
	fake.seedUserMutex.Lock()
	defer fake.seedUserMutex.Unlock()
	fake.SeedUserStub = nil
	fake.seedUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserSeeder) SeedUserReturnsOnCall(i int, result1 error) {
	fake.seedUserMutex.Lock()
	defer fake.seedUserMutex.Unlock()
	fake.SeedUserStub = nil
	if fake.seedUserReturnsOnCall == nil {
		fake.seedUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.seedUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserSeeder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.seedUserMutex.RLock()
	defer fake.seedUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserSeeder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db_helper.UserSeeder = new(FakeUserSeeder)
