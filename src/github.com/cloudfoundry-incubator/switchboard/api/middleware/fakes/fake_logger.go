// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/lager/v3"
)

type FakeLogger struct {
	RegisterSinkStub        func(lager.Sink)
	registerSinkMutex       sync.RWMutex
	registerSinkArgsForCall []struct {
		arg1 lager.Sink
	}
	SessionStub        func(task string, data ...lager.Data) lager.Logger
	sessionMutex       sync.RWMutex
	sessionArgsForCall []struct {
		task string
		data []lager.Data
	}
	sessionReturns struct {
		result1 lager.Logger
	}
	SessionNameStub        func() string
	sessionNameMutex       sync.RWMutex
	sessionNameArgsForCall []struct{}
	sessionNameReturns     struct {
		result1 string
	}
	DebugStub        func(action string, data ...lager.Data)
	debugMutex       sync.RWMutex
	debugArgsForCall []struct {
		action string
		data   []lager.Data
	}
	InfoStub        func(action string, data ...lager.Data)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		action string
		data   []lager.Data
	}
	ErrorStub        func(action string, err error, data ...lager.Data)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		action string
		err    error
		data   []lager.Data
	}
	FatalStub        func(action string, err error, data ...lager.Data)
	fatalMutex       sync.RWMutex
	fatalArgsForCall []struct {
		action string
		err    error
		data   []lager.Data
	}
	WithDataStub        func(lager.Data) lager.Logger
	withDataMutex       sync.RWMutex
	withDataArgsForCall []struct {
		arg1 lager.Data
	}
	withDataReturns struct {
		result1 lager.Logger
	}
}

func (fake *FakeLogger) RegisterSink(arg1 lager.Sink) {
	fake.registerSinkMutex.Lock()
	fake.registerSinkArgsForCall = append(fake.registerSinkArgsForCall, struct {
		arg1 lager.Sink
	}{arg1})
	fake.registerSinkMutex.Unlock()
	if fake.RegisterSinkStub != nil {
		fake.RegisterSinkStub(arg1)
	}
}

func (fake *FakeLogger) RegisterSinkCallCount() int {
	fake.registerSinkMutex.RLock()
	defer fake.registerSinkMutex.RUnlock()
	return len(fake.registerSinkArgsForCall)
}

func (fake *FakeLogger) RegisterSinkArgsForCall(i int) lager.Sink {
	fake.registerSinkMutex.RLock()
	defer fake.registerSinkMutex.RUnlock()
	return fake.registerSinkArgsForCall[i].arg1
}

func (fake *FakeLogger) Session(task string, data ...lager.Data) lager.Logger {
	fake.sessionMutex.Lock()
	fake.sessionArgsForCall = append(fake.sessionArgsForCall, struct {
		task string
		data []lager.Data
	}{task, data})
	fake.sessionMutex.Unlock()
	if fake.SessionStub != nil {
		return fake.SessionStub(task, data...)
	} else {
		return fake.sessionReturns.result1
	}
}

func (fake *FakeLogger) SessionCallCount() int {
	fake.sessionMutex.RLock()
	defer fake.sessionMutex.RUnlock()
	return len(fake.sessionArgsForCall)
}

func (fake *FakeLogger) SessionArgsForCall(i int) (string, []lager.Data) {
	fake.sessionMutex.RLock()
	defer fake.sessionMutex.RUnlock()
	return fake.sessionArgsForCall[i].task, fake.sessionArgsForCall[i].data
}

func (fake *FakeLogger) SessionReturns(result1 lager.Logger) {
	fake.SessionStub = nil
	fake.sessionReturns = struct {
		result1 lager.Logger
	}{result1}
}

func (fake *FakeLogger) SessionName() string {
	fake.sessionNameMutex.Lock()
	fake.sessionNameArgsForCall = append(fake.sessionNameArgsForCall, struct{}{})
	fake.sessionNameMutex.Unlock()
	if fake.SessionNameStub != nil {
		return fake.SessionNameStub()
	} else {
		return fake.sessionNameReturns.result1
	}
}

func (fake *FakeLogger) SessionNameCallCount() int {
	fake.sessionNameMutex.RLock()
	defer fake.sessionNameMutex.RUnlock()
	return len(fake.sessionNameArgsForCall)
}

func (fake *FakeLogger) SessionNameReturns(result1 string) {
	fake.SessionNameStub = nil
	fake.sessionNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogger) Debug(action string, data ...lager.Data) {
	fake.debugMutex.Lock()
	fake.debugArgsForCall = append(fake.debugArgsForCall, struct {
		action string
		data   []lager.Data
	}{action, data})
	fake.debugMutex.Unlock()
	if fake.DebugStub != nil {
		fake.DebugStub(action, data...)
	}
}

func (fake *FakeLogger) DebugCallCount() int {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return len(fake.debugArgsForCall)
}

func (fake *FakeLogger) DebugArgsForCall(i int) (string, []lager.Data) {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return fake.debugArgsForCall[i].action, fake.debugArgsForCall[i].data
}

func (fake *FakeLogger) Info(action string, data ...lager.Data) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		action string
		data   []lager.Data
	}{action, data})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(action, data...)
	}
}

func (fake *FakeLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeLogger) InfoArgsForCall(i int) (string, []lager.Data) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].action, fake.infoArgsForCall[i].data
}

func (fake *FakeLogger) Error(action string, err error, data ...lager.Data) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		action string
		err    error
		data   []lager.Data
	}{action, err, data})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(action, err, data...)
	}
}

func (fake *FakeLogger) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeLogger) ErrorArgsForCall(i int) (string, error, []lager.Data) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].action, fake.errorArgsForCall[i].err, fake.errorArgsForCall[i].data
}

func (fake *FakeLogger) Fatal(action string, err error, data ...lager.Data) {
	fake.fatalMutex.Lock()
	fake.fatalArgsForCall = append(fake.fatalArgsForCall, struct {
		action string
		err    error
		data   []lager.Data
	}{action, err, data})
	fake.fatalMutex.Unlock()
	if fake.FatalStub != nil {
		fake.FatalStub(action, err, data...)
	}
}

func (fake *FakeLogger) FatalCallCount() int {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return len(fake.fatalArgsForCall)
}

func (fake *FakeLogger) FatalArgsForCall(i int) (string, error, []lager.Data) {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return fake.fatalArgsForCall[i].action, fake.fatalArgsForCall[i].err, fake.fatalArgsForCall[i].data
}

func (fake *FakeLogger) WithData(arg1 lager.Data) lager.Logger {
	fake.withDataMutex.Lock()
	fake.withDataArgsForCall = append(fake.withDataArgsForCall, struct {
		arg1 lager.Data
	}{arg1})
	fake.withDataMutex.Unlock()
	if fake.WithDataStub != nil {
		return fake.WithDataStub(arg1)
	} else {
		return fake.withDataReturns.result1
	}
}

func (fake *FakeLogger) WithDataCallCount() int {
	fake.withDataMutex.RLock()
	defer fake.withDataMutex.RUnlock()
	return len(fake.withDataArgsForCall)
}

func (fake *FakeLogger) WithDataArgsForCall(i int) lager.Data {
	fake.withDataMutex.RLock()
	defer fake.withDataMutex.RUnlock()
	return fake.withDataArgsForCall[i].arg1
}

func (fake *FakeLogger) WithDataReturns(result1 lager.Logger) {
	fake.WithDataStub = nil
	fake.withDataReturns = struct {
		result1 lager.Logger
	}{result1}
}

var _ lager.Logger = new(FakeLogger)
