<%=
  proxy_uris = []
  if_p('api_uri') do |api_uri|
    proxy_uris = link('proxy').instances.map do |instance|
      "#{instance.index}-#{api_uri}"
    end
  end

  backends = link('mysql').instances.map do |instance|
    {
      Host: instance.address,
      Port: link('mysql').p('port'),
      StatusPort: link('galera-agent').p('port'),
      StatusEndpoint: 'api/v1/status',
      Name: "#{instance.name}/#{instance.id}",
    }
  end

  config = {
    API: {
      ProxyURIs: proxy_uris,
      Port: p('api_port'),
      AggregatorPort: p('api_aggregator_port'),
      ForceHttps: p('api_force_https'),
      Username: p('api_username'),
      Password: p('api_password'),
    },
    Proxy: {
      Port: p('port'),
      HealthcheckTimeoutMillis: p('healthcheck_timeout_millis'),
      Backends: backends,
    },
    HealthPort: p('health_port'),
    StaticDir: '/var/vcap/packages/proxy/static',
  }

  if link('galera-agent').p('endpoint_tls.enabled')
    config[:GaleraAgentTLS] = {
        Enabled: true,
        CA: link('galera-agent').p('endpoint_tls.ca'),
        ServerName: link('galera-agent').p('endpoint_tls.server_name'),
    }
  end

  if p('api_tls.enabled', false)
    config[:API][:TLS] = {
      Enabled: true,
      Certificate: p('api_tls.certificate'),
      PrivateKey: p('api_tls.private_key'),
    }
  end

  if_p('inactive_mysql_port') do |inactive_mysql_port|
    config[:Proxy][:InactiveMysqlPort] = inactive_mysql_port
  end

  JSON.pretty_generate(config)
%>
